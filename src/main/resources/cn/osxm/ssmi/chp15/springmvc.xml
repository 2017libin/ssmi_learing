<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
	<!-- 自动扫描 -->
	<mvc:annotation-driven />


	<context:component-scan base-package="com.osxm" use-default-filters="false">
		<!-- 扫描注解为@Controller的类 -->
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<!-- ControllerAdvice注解用来处理全局异常，可以标记在类上，故此处为扫描注解为@ControllerAdvice的类 -->
		<context:include-filter type="annotation"
			expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>
	<!-- 处理静态资源 -->
	<mvc:default-servlet-handler />

	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->

	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" /> <!-- JSON转换器 -->
			</list>
		</property>
	</bean>

	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->

	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">

		<!-- 默认编码 -->

		<property name="defaultEncoding" value="utf-8" />

		<!-- 文件大小最大值 -->

		<property name="maxUploadSize" value="10485760000" />

		<!-- 内存中的最大值 -->

		<property name="maxInMemorySize" value="40960" />

		<!-- 启用是为了推迟文件解析，以便捕获文件大小异常 -->

		<property name="resolveLazily" value="true" />

	</bean>
  
     <!-- 自定义的实现类 -->
    <bean id="exceptionHandler" class="com.enh.test.CustomExceptionHandler"/>
  	<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<!-- 为所有的异常定义默认的异常处理页面，exceptionMappings未定义的异常使用本默认配置 -->  
		 <property name="order" value="-1"/>
		<property name="defaultErrorView" value="error"/>
		 <!-- 定义异常处理页面用来获取异常信息的变量名，默认名为exception -->  
		<property name="exceptionAttribute" value="ex"></property>  
		<property name="defaultStatusCode">
			<value>500</value>
		</property>
		  <!-- 
		　　　　定义需要特殊处理的异常，用类名或完全路径名作为key，异常页文件名作为值，
		　　　　将不同的异常映射到不同的页面上。
		　　 -->  
		    <property name="exceptionMappings">  
		        <props>  
		            <prop key="IOException">error/ioexp</prop>  
		            <prop key="java.sql.SQLException">error/sqlexp</prop>  
		        </props>  
		    </property>  
		<property name="warnLogCategory">
			<value>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver</value>
		</property>
		<!-- 表示当抛出异常但没有在exceptionMappings里面找到对应的异常时 返回名叫defaultView的视图-->
		<property name="defaultErrorView" value="defaultView"/>
		    <!-- 定义在发生异常时视图跟返回码的对应关系 -->
		<property name="statusCodes">
			<props>
				<!-- 表示在发生NumberFormatException时返回视图number，然后这里定义发生异常时视图number对应的HttpServletResponse的返回码是500 -->
				<prop key="error">500</prop>
				<prop key="null">503</prop>
				<!-- <prop key="runtime">502</prop> -->
			</props>
		</property>
		<!-- 表示在发生异常时默认的HttpServletResponse的返回码是多少，默认是200 -->
		<property name="defaultStatusCode" value="404"/>
		
	</bean>

	<!-- 配置ViewResolver 。可用多个ViewResolver 。使用order属性排序。 InternalResourceViewResolver 放在最后 -->
	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="order" value="1"></property>
		<property name="mediaTypes">
			<map>
				<!-- 告诉视图解析器，返回的类型为json格式 -->
				<entry key="json" value="application/json" />
				<entry key="xml" value="application/xml" />
				<entry key="htm" value="text/htm" />
			</map>
		</property>
		<property name="defaultViews">
			<list>
				<!-- ModelAndView里的数据变成JSON -->
				<bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" />
			</list>
		</property>
		<property name="ignoreAcceptHeader" value="true"></property>
	</bean>



	<!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>
</beans>
